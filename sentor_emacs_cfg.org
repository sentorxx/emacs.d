* sentor's Emacs config
  Writing the emacs configuration in org-mode I have first seen from [[http://sachachua.com/][Sacha Chua]]. Here is her awesome config https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org.
** personal information
   #+BEGIN_SRC emacs-lisp :results silent
     (setq user-full-name "Torsten Senf"
	user-mail-address "sentor@sentor.de"
	user-login-name "sentor")
   #+END_SRC

** emacs initialization
*** packages


    #+BEGIN_SRC emacs-lisp :results silent
    (require 'package)
    ;(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (package-initialize)
    #+END_SRC

    Use =M-x package-refresh-contents= to reload the list of packages after adding these for the first time. Use the variable =package-activated-list= =C-h v package-activated-list= to see all installed packages at the moment.

*** variables
    go environments
    #+BEGIN_SRC emacs-lisp :results silent
    (setenv "GOROOT" "/home/sentor/download/go")
    (setenv "GOPATH" "/home/sentor/gopath")
    #+END_SRC

** general configuration
   *Shorten yes/no*
   #+BEGIN_SRC emacs-lisp :results silent
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   *No* startup screen
   #+BEGIN_SRC emacs-lisp :results silent
     (setq inhibit-startup-message t)
   #+END_SRC

   *No* -bar-modes in the windows system
   #+BEGIN_SRC emacs-lisp :results silent
     (when window-system
       (tooltip-mode -1)
       (tool-bar-mode -1)
       (menu-bar-mode -1)
       (scroll-bar-mode -1))
   #+END_SRC

   *Enable word-wrap*
   #+BEGIN_SRC emacs-lisp :results silent
   (global-visual-line-mode 1)
   #+END_SRC

   *Show columns in modline*
   #+BEGIN_SRC emacs-lisp :results silent
   (column-number-mode t)
   #+END_SRC

   *Auto revert all buffers*
   #+BEGIN_SRC emacs-lisp :results silent
   (setq global-auto-revert-mode t)
   #+END_SRC

   *my way to window moving: using meta + cursor keys*
   #+BEGIN_SRC emacs-lisp :results silent
   (require 'windmove)
   ; super key is the window key
   (windmove-default-keybindings 'super)
   #+END_SRC

   *show more name in status bar if buffers are equal* ships with emacs
   #+BEGIN_SRC emacs-lisp :results silent
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
   #+END_SRC

   *adding path's*
   #+BEGIN_SRC emacs-lisp :results silent
   (add-to-list 'load-path "~/.emacs.d/lisp")
   #+END_SRC

** color theme and colors
   i prefer moe-theme at the moment which comes from melpa
   zenburn or solarized-dark are also nice and used for a long time
   source: https://github.com/bbatsov/zenburn-emacs
   #+BEGIN_SRC emacs-lisp :results silent
     ;; (require 'moe-theme)
     ;; (load-theme 'moe-dark t)
     (load-theme 'sanityinc-tomorrow-night t)
   #+END_SRC


   some custom faces
   #+BEGIN_SRC emacs-lisp :results silent
     (when window-system
       (custom-set-faces
	'(helm-selection ((t (:background "ForestGreen" :foreground "black"))))))
      #+END_SRC

** backups
  #+begin_src emacs-lisp :results silent
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    (setq delete-old-versions -1)
    (setq version-control t)
    (setq vc-make-backup-files t)
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  #+end_src

** dired / dired+
   Show the verbose listing in dired mode by default
   don't use nil :)
   I wan't the less verbose output to jump quicker ....
   #+BEGIN_SRC emacs-lisp :results silent
     ;;(setq diredp-hide-details-initially-flag nil)
   #+END_SRC

   *Auto revert dired*
   doesn't work in any case http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Reverting-Dired.html#Auto-Reverting-Dired
   #+BEGIN_SRC emacs-lisp :results silent
   (setq dired-auto-revert-buffer t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :results silent
     (require 'dired+)

     ;; ;; sorting directories first
     ;; ;; C-u s let you change the switches on minibuffer
     ;; --group-directories-first only on GNU linux
     (setq dired-listing-switches "-aBhl")

     ;; other way to sort in dired
     ;; https://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
     (defun mydired-sort ()
       "Sort dired listings with directories first."
       (save-excursion
	 (let (buffer-read-only)
	(forward-line 2) ;; beyond dir. header
	(sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
	 (set-buffer-modified-p nil)))

     (defadvice dired-readin
	 (after dired-after-updating-hook first () activate)
       "Sort dired listings with directories first before adding marks."
       (mydired-sort))

     ;; ;; run shell programs on ! in dired mode
     (require 'dired-x)
     ;; ;; open csr with openssl ...
     (setq dired-guess-shell-alist-user
	'(("\\.csr\\'" "openssl req -text -in")
	  ("\\.pem\\'" "openssl x509 -text -fingerprint -in")
	  ("\\.crt\\'" "openssl x509 -text -fingerprint -in")
	  ("\\.mp4\\'" "vlc &")))

   #+END_SRC
   Dired tries to guess a default target directory.
   This means: if there is a Dired buffer displayed in the next
   window, use its current directory, instead of this Dired bufferâ€™s
   current directory

   2 dired buffers (easy copy move ...)
   #+BEGIN_SRC emacs-lisp :results silent
   (setq dired-dwim-target t)
   
   #+END_SRC

** Which Key a successor of Guide Key
   http://ericjmritz.name/2015/09/15/recent-emacs-packages-as-of-september-2015/
   #+BEGIN_SRC emacs-lisp :results silent
     (require 'which-key)
     (which-key-mode)
     ;; show the keys on the right side like guide keys
     (which-key-setup-side-window-right)
     (setq which-key-idle-delay 0.6)

   #+END_SRC

** hydra's
   abo-abo hydra's
   https://github.com/abo-abo/hydra
   my first hydra adjust window size bound to a key-chord
   press `ws' simultaneous
   #+BEGIN_SRC emacs-lisp :results silent
   (key-chord-define-global
      "ws"
      (defhydra hydra-window-size ()
	"change window-size"
	("h" enlarge-window-horizontally "enlarge horizontal êœ›")
	;; left beside h is g which makes smaller
	("g" shrink-window-horizontally "shrink horizontal êœœ")
	("v" enlarge-window "enlarge vertical ")
	;; left beside v is c which makes smalles
	("c" shrink-window "shrink vertical ")))
	;;(key-chord-define-global "ww" 'hydra-window-size/body)
   #+END_SRC

   jump / search into buffers with my favorite functions
   #+BEGIN_SRC emacs-lisp :results silent
     (key-chord-define-global
      "jj"
      (defhydra hydra-jump-into-buffer (:color blue)
	"jump-arround"
	("c" avy-goto-char "goto-char")
	("b" avy-goto-word-1 "goto-word-1")
	("w" ace-window "jump to window")
	("s" helm-swoop "helm-swoop")
	("r" helm-org-rifle "helm-org-rifle")
	("l" avy-goto-line "goto-line")))
   #+END_SRC

   problem's mc/edit-lines with helm-M-x
   https://github.com/magnars/multiple-cursors.el/issues/151
   so find a propper key or a hydra yeah

   #+BEGIN_SRC emacs-lisp :results silent
     (key-chord-define-global
      "mc"
      (defhydra hydra-multiple-cursors (:hint nil)
	"
	    ^Up^            ^Down^        ^Other^
       ----------------------------------------------
       [_p_]   Next    [_n_]   Next    [_l_] Edit lines
       [_P_]   Skip    [_N_]   Skip    [_b_] Edit beginning of lines
       [_M-p_] Unmark  [_M-n_] Unmark  [_e_] Edit beginning of lines
       ^ ^             ^ ^             [_a_] Mark allQ
       ^ ^             ^ ^             [_r_] Mark by regexp
       ^ ^             ^ ^	       [_q_] Quit
       "
	("l" mc/edit-lines)
	("b" mc/edit-beginnings-of-lines)
	("e" mc/edit-ends-of-lines)
	("a" mc/mark-all-like-this)
	("n" mc/mark-next-like-this)
	("N" mc/skip-to-next-like-this)
	("M-n" mc/unmark-next-like-this)
	("p" mc/mark-previous-like-this)
	("P" mc/skip-to-previous-like-this)
	("M-p" mc/unmark-previous-like-this)
	("r" mc/mark-all-in-region-regexp)
	("q" nil)))
   #+END_SRC

   do mail functions via my emacs mailer mu4e
  #+BEGIN_SRC emacs-lisp :results silent
  (key-chord-define-global
   "dm"
   (defhydra hydra-do-mail (:color blue)
     "do-mail"
     ("c" mu4e-compose-new "compose mail")
     ("j" mu4e~headers-jump-to-maildir "jump mail dir")
     ("s" helm-mu "search mail")))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results silent
    (key-chord-define-global
    "bm"
   (defhydra hydra-book-mark (:color blue)
     "book-mark"
     ("a" org-board-archive "archive / save bookmark local")
     ("o" org-board-open "open bookmark")))
  #+END_SRC

** fonts  / scaling
*** special char font
    Show special chars etc. C-x 8 RET => `CRYING CAT FACE' ðŸ˜¿ with a special font.
    Very cool and seen here => http://irreal.org/blog/?p=2832 ... but doesn't work in current emacs
    #+BEGIN_SRC emacs-lisp :results silent
      (set-fontset-font "fontset-default" nil
		    ;;(font-spec :size 30 :name "DejaVu Sans Mono"))
		    ;;(font-spec :size 30 :name "Symbola"))
		    (font-spec :size 30 :name "Unifont"))
    #+END_SRC

*** scaling
    #+BEGIN_SRC emacs-lisp :results silent
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "C-0") 'text-scale-adjust)
    #+END_SRC

** server
   Use emacs as a server to connect with emacsclient ...
   #+BEGIN_SRC emacs-lisp :results silent
   (server-start)
   #+END_SRC

** magit
   Using git from within emacs

   Don't highlight the region in magit diff view
   #+BEGIN_SRC emacs-lisp :results silent
     (custom-set-variables
      '(magit-item-highlight-face nil)
      '(magit-diff-use-overlays nil)
      '(magit-use-overlays nil)
      )
   #+END_SRC

   Use 'F5' for git status
   #+BEGIN_SRC emacs-lisp :results silent
     (global-set-key (kbd "<f5>")  'magit-status)
   #+END_SRC

** undo tree
   Replace emacs undo handling with undo tree. Undo tree is an package from melpa.

   #+BEGIN_SRC emacs-lisp :results silent
     (global-undo-tree-mode)
     (setq undo-tree-visualizer-timestamps t)
     (setq undo-tree-visualizer-diff t)
      #+END_SRC

** smart mode line
   Find by Sacha
   #+BEGIN_SRC emacs-lisp :results silent
     ;; no confirmation is needed for theme which load lisp
     (setq sml/no-confirm-load-theme t)
     (sml/setup)
     (sml/apply-theme 'dark)
   #+END_SRC

** twitter
   using twittering-mode
   
   see hydra https://github.com/abo-abo/hydra/wiki/Twittering

   first of all get pin via oauth use `twit'
   https://github.com/hayamiz/twittering-mode
   #+BEGIN_SRC emacs-lisp :results silent
   (setq twittering-icon-mode t)
   ;; keep icons in a local storage
   ;; ~/.twittering-mode-icons.gz, which can be changed by the variable twittering-icon-storage-file.
   (setq twittering-use-icon-storage t)
   ;; number of tweets
   (setq twittering-number-of-tweets-on-retrieval 100)
   (setq twittering-status-format
   "%FOLD{%RT{%FACE[bold]{RT}} %i %FACE[bold]{%S} %FACE[shadow]{%r @%C{%Y-%m-%d %H:%M:%S} via: %f\n}%FOLD[ ]{%T%RT{\nretweeted by %i %S (%FIELD-IF-NONZERO{retweet_count} retweets)  } (%FIELD-IF-NONZERO{favorite_count} favorites) }}\n")
   ;; found here
   ;; http://doc.rix.si/org/fsem.html#sec-12
   (add-hook 'twittering-edit-mode-hook 'turn-on-flyspell)
   ;; fetch not so often
   (setq twittering-timer-interval 120)
   ;; should visible / show tweet to reply use "r"
   (setq twittering-use-master-password t)
   ;; resize images default 48px which is to nmuch
   (setq twittering-convert-fix-size 40)
   #+END_SRC
   
   set minor mode against typos :)
   #+BEGIN_SRC emacs-lisp :results silent
    (add-hook 'twittering-edit-mode-hook (lambda () (flyspell-mode)))
   #+END_SRC

** key-chord
   to work, press different two characters simultaneous or the same twice
   key-chords are used in hydra
   #+BEGIN_SRC emacs-lisp :results silent
   (setq key-chord-one-key-delay 0.2)
   (key-chord-mode 1)
   #+END_SRC

** avy
   abo-abo avy ... quick jump to visible elements
   see hydra's

** rainbow delimiters
   Enable rainbox delimiters
   #+BEGIN_SRC emacs-lisp :results silent
   (require 'rainbow-delimiters)
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC

** multiple cursors
   used in hydra's see there

** org-mode
*** Basics
    hide emphasis-markers e.g. see /foo bar/ as italic
    #+BEGIN_SRC emacs-lisp :results silent
    (setq org-hide-emphasis-markers t)
    #+END_SRC

*** Shortcuts
    Some often use shortcuts
     #+BEGIN_SRC emacs-lisp :results silent
       (global-set-key "\C-cl" 'org-store-link)
       (global-set-key "\C-ca" 'org-agenda)
       (global-set-key "\C-cb" 'org-iswitchb)
     #+END_SRC

*** Exportes

    #+BEGIN_SRC emacs-lisp :results silent
      ;; use also exporter in the contrib directory
      (add-to-list 'load-path "/home/sentor/download/org-mode/contrib/lisp")
      (require 'ox-html)
      (require 'ox-latex)
      (require 'ox-beamer)
      (require 'ox-odt)
      (require 'ox-org)
      (require 'ox-koma-letter)
    #+END_SRC

    Use the awesome *scrartl class*. I like this class more than the standard article class.
    use this latex class with: =#+LaTeX_CLASS: koma-article=
    #+BEGIN_SRC emacs-lisp :results silent
      (add-to-list 'org-latex-classes
	       '("koma-article"
		 "\\documentclass{scrartcl}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    #+END_SRC

    Test =xelatex= as latex compiler.
    Install package =texlive-xetex= on debian.
    #+BEGIN_SRC emacs-lisp :results silent
      (setq org-latex-compiler "xelatex")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :results silent
      (setq org-latex-packages-alist
	;; xltxtra will load fontspec + xunicode e.g. for german umlauts
	'(("" "xltxtra" t)))
    #+END_SRC

*** Babel Code Block Stuff
    
    don't ask for code evaluation
    #+BEGIN_SRC emacs-lisp :results silent
    (setq org-confirm-babel-evaluate nil)
    #+END_SRC

    Colorize the code in the src code blocks
    #+BEGIN_SRC emacs-lisp :results silent
    (setq org-src-fontify-natively t)
    #+END_SRC

    execute code blocks into org-mode and get the result into the buffer pretty cool
    http://emacs-fu.blogspot.de/2011/02/executable-source-code-blocks-with-org.html
    #+BEGIN_SRC emacs-lisp :results silent
      (org-babel-do-load-languages
       'org-babel-load-languages
       '( (perl . t)
	  (ruby . t)
	  (sh . t)
	  (python . t)
	  (emacs-lisp . t)
	  (ditaa . t)
	  (gnuplot . t)
	  ))
    #+END_SRC

    colorize ascii art with ditaa
    http://ditaa.sourceforge.net/
    #+BEGIN_SRC emacs-lisp :results silent
    (setq org-ditaa-jar-path "~/.emacs.d/DitaaEps/DitaaEps.jar")
    #+END_SRC

    make some special modes in picture / artist mode to better edit ascii art graphics
    the ruler-mode will be overwrite with other stuff; acticvate that later

    #+BEGIN_SRC emacs-lisp :results silent
    (setq picture-mode-hook (quote (linum-mode hl-line-mode ruler-mode)))
    #+END_SRC

*** Folded content
    sign which indicates that content is under the heading or in code blocks
    http://endlessparentheses.com/changing-the-org-mode-ellipsis.html
    #+BEGIN_SRC emacs-lisp :results silent
    (setq org-ellipsis "â¤µ")
    #+END_SRC

*** Bullets in front of headings
    #+BEGIN_SRC emacs-lisp :results silent
    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    #+END_SRC

*** Capture
    want to try org-board https://github.com/scallywag/org-board
    #+BEGIN_SRC emacs-lisp :results silent
    (require 'org-protocol)
    #+END_SRC
    
    #+BEGIN_SRC emacs-lisp :results silent
      (define-key global-map "\C-cc" 'org-capture)
      (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline "~/documents/own/private_gtd.org" "Tasks")
           "** TODO %? date: %U\n %i\n")
          ("b" "capture through org protocol" entry (file+headline "~/documents/own/bookmarks.org" "Bookmarks")
           "* %?%:description\n:PROPERTIES:\n:URL: %:link\n:END:\n\n Added %U")))

    #+END_SRC

*** org-board
    want to try org-board https://github.com/scallywag/org-board
    #+BEGIN_SRC emacs-lisp :results silent
    (require 'org-protocol)
    #+END_SRC
    the capture definition is here =>  [[*Capture][Capture]] 
    #+BEGIN_SRC emacs-lisp :results silent
      (setq org-board-capture-file "~/documents/own/bookmarks.org")
      
      (defun do-org-board-dl-hook ()
        (when (equal (buffer-name)
    		 (concat "CAPTURE-" org-board-capture-file))
          (org-board-archive)))

      (add-hook 'org-capture-before-finalize-hook 'do-org-board-dl-hook)
    #+END_SRC
    org-board keymap 
    #+BEGIN_SRC emacs-lisp :results silent
     (global-set-key (kbd "C-c o") 'org-board-keymap)
    #+END_SRC
   
*** Publishing
    publish my own org-files

    export html as html5
    #+BEGIN_SRC emacs-lisp :results silent
     (setq org-html-doctype "html5")
    #+END_SRC

    #+BEGIN_SRC emacs-lisp :results silent
      (setq org-export-html-postamble-format
	'(("en" "<p class=\"postamble\">Last Updated %d %C. Created by %c</p>")))

      (setq org-publish-project-alist
	'(("myweb"
	   :base-directory "/home/sentor/documents/own/blog/export/base/"
	   :base-extension "org"
	   :publishing-directory "/home/sentor/documents/own/blog/export/html/pages/"
	   :publishing-function org-html-publish-to-html
	   :exclude "foo.org"   ;; regexp
	   :headline-levels 3
	   :section-numbers nil
	   :auto-sitemap t
	   :with-toc nil
	   :html-head "<link rel=\"stylesheet\"
			   href=\"../other/org.css\" type=\"text/css\"/>"
	   :html-preamble "
	 <div id=\"menu\">
	<p>
	<a href=\"../../index.html\" >Home</a> |
	<a href=\"page2.html\" >Page 2</a> |
	<a href=\"page3.html\" >Page 3</a> |
	<a href=\"page4.html\" >Page 4</a>
	</p>
	   </div>
	"

	   )

	  ("images"
	   :base-directory "/home/sentor/documents/own/blog/export/images/"
	   :base-extension "jpg\\|gif\\|png"
	   :publishing-directory "/home/sentor/documents/own/blog/export/html/images/"
	   :publishing-function org-publish-attachment)

	  ("other"
	   :base-directory "/home/sentor/documents/own/blog/export/other/"
	   :base-extension "css\\|el"
	   :publishing-directory "//home/sentor/documents/own/blog/export/html/other/"
	   :publishing-function org-publish-attachment)
	  ("website" :components ("orgfiles" "images" "other"))))
    #+END_SRC

*** Agenda
    needed for creating ics files with hours e.g. <2016-03-19 Sa 14:00>--<2016-03-19 Sa 23:00>
    #+BEGIN_SRC emacs-lisp :results silent
    (setq org-agenda-default-appointment-duration 60)

    #+END_SRC

*** breadcumb ... see where you are in org tree
    https://gist.github.com/theodorewiles/cce2c170f8d4dfc60f06073cb73dfe10
    #+BEGIN_SRC emacs-lisp
      (require 'cl)

      (defun org-get-header-list (&optional buffer) 
        "Get the headers of an org buffer as a flat list of headers and levels.
      Buffer will default to the current buffer.
      Thanks to http://emacs.stackexchange.com/questions/17622/how-can-i-walk-an-org-mode-tree
      for this function!
      "
        (with-current-buffer (or buffer (current-buffer))
          (let ((tree (org-element-parse-buffer 'headline)))
    	(org-element-map 
                tree 
                'headline
              (lambda (el) (list
    			(org-element-property :raw-value el) ; get the header text
    			(org-element-property :begin el) ; get where the header starts
    			(org-element-property :end el) ; get where the header ends
    			(org-element-property :level el) ; get depth
                       ;; >> could add other properties here
                       ))))))

      (defun tw/test-if-between (p e)
        "Test if p lies between the second and third elements of e"
        (and (>= p (second e))
    	 (<= p (nth 2 e))))

      ;; (defun tw/org-where ()
      (defun tw/breadcrumb ()
        "Display where you are in your org tree"
        (interactive)
        (message
         (mapconcat 'first
    		(remove-if-not (lambda (x) (tw/test-if-between (point) x))
                                   (org-get-header-list))
    		" > ")))

      ;; 
      ;; Map this to C-c SPC.
      ;;
      (defun my-org-hook ()
        (define-key org-mode-map (kbd "C-c SPC") 'tw/breadcrumb)
        )
      (add-hook 'org-mode-hook 'my-org-hook)

      ;; Pressing C-c SPC in an org mode buffer should give you
      ;; "Level 1 > Level 2 > Level 5", etc.

    
    #+END_SRC

** browser settings
   set the default browser
   #+BEGIN_SRC emacs-lisp :results silent
     (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")
   #+END_SRC

** aspell
   #+BEGIN_SRC emacs-lisp :results silent
   (setq ispell-program-name "/usr/bin/aspell")
   (setq ispell-list-command "list")
   (setq-default ispell-extra-args '("--encoding=UTF-8"))
   #+END_SRC

** calendar
   Start the week with monday
   #+BEGIN_SRC emacs-lisp :results silent
   (setq calendar-week-start-day 1)
   #+END_SRC

** mu4e - my mailer inside emacs
   use a separate file for my mu4e mail config
   defined in =init.el=
   #+INCLUDE: "~/.emacs.d/mu4e_config.org"
** rfc mode
   *reading rfc*
   #+BEGIN_SRC emacs-lisp :results silent
   (require 'irfc)
   (setq irfc-assoc-mode t)
   #+END_SRC

** kill ring
   #+BEGIN_SRC emacs-lisp :results silent
  (require 'browse-kill-ring)
  (global-set-key "\C-cy" 'browse-kill-ring)
   #+END_SRC

** helm
   #+BEGIN_SRC emacs-lisp :results silent
     ;; https://tuhdo.github.io/helm-intro.html
     (require 'helm)

     ;; must set before helm-config,  otherwise helm use default
     ;; prefix "C-x c", which is inconvenient because you can
     ;; accidentially pressed "C-x C-c"
     (setq helm-command-prefix-key "C-c h")

     (require 'helm-config)
     (require 'helm-eshell)
     (require 'helm-files)
     (require 'helm-grep)

     ;; resize the helm buffer according to the matches
     (helm-autoresize-mode 1)

     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
     (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
     (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

     (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
     (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
     (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

     (setq
      helm-google-suggest-use-curl-p t
      helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
      helm-quick-update t ; do not display invisible candidates
      helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
      helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
      helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.

      helm-split-window-default-side 'other ;; open helm buffer in another window
      helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
      helm-buffers-favorite-modes (append helm-buffers-favorite-modes
				       '(picture-mode artist-mode))
      helm-candidate-number-limit 200 ; limit the number of displayed canidates
      helm-M-x-requires-pattern 0     ; show all candidates when set to 0
      helm-boring-file-regexp-list
      '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$") ; do not show these files in helm buffer
      helm-ff-file-name-history-use-recentf t
      helm-move-to-line-cycle-in-source t ; move to end or beginning of source
					     ; when reaching top or bottom of source.
      ido-use-virtual-buffers t      ; Needed in helm-buffers-list
      helm-buffers-fuzzy-matching t          ; fuzzy matching buffer names when non--nil
					     ; useful in helm-mini that lists buffers
      )


     ;; Save current position to mark ring when jumping to a different place
     ;;(add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     ;; prefixes in helm M-x has to be inserted AFTER M-xhttp://tuhdo.github.io/helm-intro.html
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-x b") 'helm-mini)
     (global-set-key (kbd "C-x rb") 'helm-bookmarks)


     ;(setq enable-recursive-minibuffers t)
     (helm-mode 1)

   #+END_SRC

** weather with wttr.in
   found here http://pragmaticemacs.com/emacs/weather-in-emacs/
   #+BEGIN_SRC emacs-lisp :results silent
   (require 'wttrin)
   (setq wttrin-default-cities '("Kahla""Greuda""Jena"))
   #+END_SRC

** music / mpg123
   Play mp3 in emacs with an interface to mpg123 ... why not ;)
   #+BEGIN_SRC emacs-lisp :results silent
     (require 'mpg123)
   #+END_SRC

** bbdb
   Interessting link:
   - http://doc.rix.si/cce/cce-home.html
   get it from source and use it e.g. in mu4e
   https://www.emacswiki.org/emacs/UpgradeBBDB
   #+BEGIN_SRC emacs-lisp :results silent
     (require 'bbdb-com)
     (setq bbdb-offer-save 1) ;; 1 means save-without-asking
     (setq bbdb-complete-mail-allow-cycling t)  ;; cycle through multiple mail addresses
     (setq bbdb-pop-up-window-size 5)
     (setq bbdb-horiz-pop-up-window-size (quote (66 . 10))) ;; doesn't work as expected
     (setq bbdb-image-path "/home/sentor/.emacs.d/bbdb_images/")
   #+END_SRC

** handling parentheses
   *enable paren mode*
   #+BEGIN_SRC emacs-lisp :results silent
     (show-paren-mode 1)
     (setq show-paren-delay 0)
   #+END_SRC

   *use smartparens*
   https://github.com/Fuco1/smartparens
   #+BEGIN_SRC emacs-lisp :results silent
     (require 'smartparens-config)
   #+END_SRC

** tempbuf
   *deletes inactive buffers in the background*
   #+BEGIN_SRC emacs-lisp :results silent
   (require 'tempbuf)
   ;; delete inactive bbdb buffers in the background
   (add-hook 'bbdb-mode-hook 'turn-on-tempbuf-mode)
   #+END_SRC

** elfeed - feed reader
    elfeed-org
    http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
    https://github.com/remyhonig/elfeed-org
    #+BEGIN_SRC emacs-lisp :results silent
    (require 'elfeed-org)
    (require 'elfeed)
    (setq rmh-elfeed-org-files (list "/home/sentor/documents/own/elfeed.org"))

    (setq elfeed-search-title-max-width 90)
    #+END_SRC


   ELfeed colors test
   #+BEGIN_SRC emacs-lisp :results silent
     (custom-set-faces
      '(elfeed-search-date-face
	((t :foreground "#aaa"
	    :weight bold)))
      '(elfeed-search-title-face
	((t :foreground "#696" )))
      '(elfeed-search-tag-face
	((t :foreground "#0ff")))
      '(elfeed-search-unread-title-face
	((t :foreground "#8b0"
	    :weight bold ))))
   #+END_SRC

   Star / Unstar articles
   http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/
   awesome but refacture to my needs

   #+BEGIN_SRC emacs-lisp :results silent
     ;; code to add and remove a starred tag to elfeed article
     ;; based on http://matt.hackinghistory.ca/2015/11/22/elfeed/

     ;; add a star
     (defun bjm/elfeed-star ()
       "Apply starred to all selected entries."
       (interactive )
       (let* ((entries (elfeed-search-selected))
	      (tag (intern "starred")))

	 (cl-loop for entry in entries do (elfeed-tag entry tag))
	 (mapc #'elfeed-search-update-entry entries)
	 (unless (use-region-p) (forward-line))))

     ;; remove a start
     (defun bjm/elfeed-unstar ()
       "Remove starred tag from all selected entries."
       (interactive )
       (let* ((entries (elfeed-search-selected))
	      (tag (intern "starred")))

	 (cl-loop for entry in entries do (elfeed-untag entry tag))
	 (mapc #'elfeed-search-update-entry entries)
	 (unless (use-region-p) (forward-line))))

     ;; face for starred articles
     (defface elfeed-search-starred-title-face
       '((t :foreground "#f77"))
       "Marks a starred Elfeed entry.")

     (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)

     ;; add keybindings
     (eval-after-load 'elfeed-search
       '(define-key elfeed-search-mode-map (kbd "+") 'bjm/elfeed-star))
     (eval-after-load 'elfeed-search
       '(define-key elfeed-search-mode-map (kbd "-") 'bjm/elfeed-unstar))

     ;;shortcut to jump to starred bookmark
     (defun bjm/elfeed-show-starred ()
       (interactive)
       (bookmark-jump "elfeed-starred"))
     (define-key elfeed-search-mode-map (kbd "S") 'bjm/elfeed-show-starred)

   #+END_SRC

** tramp
   Using sudo inside tramp
   Use:
   C-x C-f /sudo:remote-host:/file//
   #+BEGIN_SRC emacs-lisp :results silent
     ;; (add-to-list 'tramp-default-proxies-alist
     ;;		     '((regexp-quote (system-name)) nil nil))

     (add-to-list 'tramp-default-proxies-alist
	       '(nil "\\`root\\'" "/ssh:%h:"))
   #+END_SRC

** keychain
   Load my keychain (https://wiki.archlinux.org/index.php/SSH_keys#Keychain) environments to easy connect via ssh key

   #+BEGIN_SRC emacs-lisp :results silent
   (require 'keychain-environment)
   (keychain-refresh-environment)
   #+END_SRC

** erc 
   hide some IRC message types 
   #+BEGIN_SRC emacs-lisp :results silent
   (setq erc-hide-list '("JOIN" "PART" "QUIT"))
   #+END_SRC

** ruby 
   infos:
   - https://stackoverflow.com/questions/20729873/recommendation-for-emacs-ruby-setup
   - http://crypt.codemancers.com/posts/2013-09-26-setting-up-emacs-as-development-environment-on-osx/

   config for ruby lang  
   enhanced-ruby-mode https://github.com/zenspider/enhanced-ruby-mode
   #+BEGIN_SRC emacs-lisp :results silent
     (add-to-list 'auto-mode-alist
     '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
   #+END_SRC

   robe stuff https://github.com/dgutov/robe
   requires:
   - gem install pry, pry-doc, method_source
   #+BEGIN_SRC emacs-lisp :results silent
   (add-hook 'enh-ruby-mode-hook 'robe-mode)
   (add-hook 'enh-ruby-mode-hook 'yard-mode)
   #+END_SRC

** yaml mode 
   Using yaml-mode => https://github.com/yoshiki/yaml-mode

   minor mode for editing yaml files 
   https://github.com/zk-phi/indent-guide
   #+BEGIN_SRC emacs-lisp :results silent
   (add-hook 'yaml-mode-hook 'indent-guide-mode)
   #+END_SRC

** ESS - Emacs Speaks Statistics
   Want test some statisticale stuff with R: 
   Goal: Parse my GPX files from suunto watch 
   Source comes from here: https://github.com/emacs-ess/ESS
   #+BEGIN_SRC emacs-lisp :results silent
      (add-to-list 'load-path "/usr/share/emacs/site-lisp/ess")
      (require 'ess-site)
   #+END_SRC

** Go 
   https://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
   #+BEGIN_SRC emacs-lisp :results silent
     (defun auto-complete-for-go ()
       (auto-complete-mode 1))
     (add-hook 'go-mode-hook 'auto-complete-for-go)
     (with-eval-after-load 'go-mode
     (require 'go-autocomplete))
   #+END_SRC

   Compile go 
   
   #+BEGIN_SRC emacs-lisp :results silent

     (defun my-go-mode-hook ()
       ;; Call Gofmt before saving
       (add-hook 'before-save-hook 'gofmt-before-save)
       ;; Customize compile command to run go build
       (if (not (string-match "go" compile-command))
   	(set (make-local-variable 'compile-command)
   	     "go build -v && go test -v && go vet"))
       ;; Godef jump key binding
       (local-set-key (kbd "M-.") 'godef-jump)
       (local-set-key (kbd "M-*") 'pop-tag-mark)
       )
     (add-hook 'go-mode-hook 'my-go-mode-hook)
   #+END_SRC
   
   Should comming up next ... Go Guru  https://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ/edit#

** my functions
   magnar's string library for daily usage https://github.com/magnars/s.el/blob/master/s.el
   #+BEGIN_SRC emacs-lisp :results silent
   (require 's)
   #+END_SRC
   (require 's)
   insert date / time string
   #+BEGIN_SRC emacs-lisp :results silent
     (defun sentor/insert-date ()
       (interactive)
       (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun sentor/copy-to-publishing-base-dir-and-publish ()
       (interactive)
       (setq my_pub_project "myweb")
       (setq my_target (plist-get (cdr (assoc my_pub_project org-publish-project-alist)) ':base-directory))
       (copy-file buffer-file-name my_target 1)
       (org-publish-project my_pub_project))
   #+END_SRC
     
   deadline the last work day
   found in search of a function for a deadline last day of month 
   just for academic reasons 
   #+BEGIN_SRC emacs-lisp :results silent
     (defun sentor/last-working-day-deadline () ;
         (interactive)
         (let* ((date (calendar-current-date)) 
          (day (calendar-extract-day date))
          (month (calendar-extract-month date))
          (year (calendar-extract-year date))
          (lastday (calendar-last-day-of-month month year)))
        ;; workdays have "names" of 1 2 3 4 or 5
        (while (not (memq (calendar-day-of-week (list month lastday year)) '(1 2 3 4 5)))
          (decf lastday))
        (org-deadline nil (format "%s-%s-%s" year month lastday))))

   #+END_SRC

   Example ghostscript to get first page of pdf as image 
   want extract first page from my e-books to see all in a shelf e.g. 
   #+BEGIN_SRC shell
   gs -q -o output.png -sDEVICE=pngalpha -dLastPage=1 -dUseCropBox input.pdf 
   #+END_SRC

